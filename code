// Global variable for the Spreadsheet
const ss = SpreadsheetApp.getActiveSpreadsheet();
// NEW: ID ‡∏Ç‡∏≠‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå Google Drive ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
const UPLOAD_FOLDER_ID = '1LGG8GJIT7BQcgu0DqkT4w5994JouNUSh'; 

// --- SCRIPT-WIDE CONSTANTS ---
// (‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ ss ‡πÅ‡∏•‡∏∞ UPLOAD_FOLDER_ID ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß)


/**
 * -----------------------------------------------------------------
 * NEW: ADMIN SETUP FUNCTIONS
 * ‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏ô‡∏π Admin ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Sheet
 * -----------------------------------------------------------------
 */

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏ô‡∏π "Admin Setup" ‡∏ö‡∏ô Google Sheet
 * ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏î‡∏£‡∏±‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢‡πÜ
 */
function onOpen() {
  const ui = SpreadsheetApp.getUi();
  ui.createMenu('‡πÄ‡∏°‡∏ô‡∏π Admin')
    .addItem('üöÄ 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á/‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï Sheet ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î', 'setupSpreadsheet')
    .addToUi();
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å: ‡∏™‡∏£‡πâ‡∏≤‡∏á Sheet ‡∏ó‡∏±‡πâ‡∏á 6 ‡∏´‡∏ô‡πâ‡∏≤ ‡πÅ‡∏•‡∏∞‡πÉ‡∏™‡πà Headers ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
 * ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏î‡∏£‡∏±‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏≤‡∏Å‡πÄ‡∏°‡∏ô‡∏π "Admin Setup" -> "‡∏™‡∏£‡πâ‡∏≤‡∏á/‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï Sheet ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"
 */
function setupSpreadsheet() {
  const ui = SpreadsheetApp.getUi();
  // ‡∏ñ‡∏≤‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô
  const response = ui.alert(
    '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤',
    '‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á Sheet ‡∏ó‡∏±‡πâ‡∏á 6 ‡∏´‡∏ô‡πâ‡∏≤ (Users, DailyVitals, DailyActivity, Medication, Lab, Documents) ‡∏´‡∏≤‡∏Å‡∏°‡∏µ Sheet ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ó‡∏≥‡∏ï‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?',
    ui.ButtonSet.YES_NO
  );

  if (response !== ui.Button.YES) {
    ui.alert('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß', '‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏î‡πÜ', ui.ButtonSet.OK);
    return;
  }
  
  try {
    Logger.log('Starting Spreadsheet Setup...');
    
    [cite_start]// 1. Users Sheet (‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô login/registerUser [cite: 46-71])
    const usersHeaders = [
      'Email', 'PasswordHash', 'Salt', 'Role'
    ];
    createSheetWithHeaders('Users', usersHeaders);

    [cite_start]// 2. DailyVitals Sheet (‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å Page-Vitals.html [cite: 393-419])
    const vitalsHeaders = [
      'Timestamp', 'RecordDateTime', 'Weight', 'Temperature', 'BPSystolic', 'BPDiastolic', 
      'HeartRate', 'RespiratoryRate', 'SpO2', 'GCS', 'O2Support', 'O2LPM', 'Intake', 
      'OutputUrine', 'OutputStool', 'OutputSuction', 'SecretionColor', 'StoolColor', 
      'StoolType', 'Rash', 'LungSound', 'Edema', 'TryWeanMin', 'Cyanosis'
    ];
    createSheetWithHeaders('DailyVitals', vitalsHeaders);

    [cite_start]// 3. DailyActivity Sheet (‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å Page-Activity.html [cite: 336-365] [cite_start]‡πÅ‡∏•‡∏∞ saveActivityData [cite: 91-95])
    const activityHeaders = [
      'Timestamp', 'RecordDateTime', 
      // PT
      'PT_Mobility', 'PT_Balance', 'PT_Strength', 'PT_Gait', 'PT_Aerobic', 'PT_ChestPT', 'PT_Note',
      // OT
      'OT_MouthCare', 'OT_OralMotor', 'OT_VitalStim', 'OT_Speech', 'OT_Cognitive', 'OT_Note',
      // Mobility
      'SittingTime', 'SittingTimeMin', 'StandingTime', 'StandingTimeMin', 'WalkingSteps',
      // Behavior/Sleep
      'ApneaDayCount', 'ApneaNightCount', 'SleepDay', 'SleepDayHours', 'SleepNight', 'SleepNightHours',
      'AgitationCount', 'DeliriumCount', 'DeliriumTime',
      // Symptoms
      'S_Fever', 'S_Cough', 'S_RunnyNose', 'S_Vomiting', 'S_Diarrhea', 'S_Headache', 'S_Seizure', 'S_Rash',
      // Notes
      'Note_PRN_Med', 'Note_ChiefComplaint'
    ];
    createSheetWithHeaders('DailyActivity', activityHeaders);

    [cite_start]// 4. Medication Sheet (‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å Page-Medication.html [cite: 24-36])
    const medHeaders = [
      'Timestamp', 'RecordDateTime', 'DrugName', 'Dose', 'Frequency', 'Route', 'Note'
    ];
    createSheetWithHeaders('Medication', medHeaders);

    [cite_start]// 5. Lab Sheet (‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å Page-Lab.html [cite: 80-93])
    const labHeaders = [
      'Timestamp', 'RecordDateTime',
      // CBC
      'WBC', 'Neutrophil', 'Lymphocyte', 'Monocyte', 'Eosinophil', 'Basophil', 'RBC', 'Hb', 'Hct', 
      'MCV', 'MCH', 'MCHC', 'RDW', 'Platelet',
      // LFT
      'AST', 'ALT', 'ALP', 'GGT', 'TotalBilirubin', 'DirectBilirubin', 'TotalProtein', 'Albumin', 'Globulin', 'AG_Ratio',
      // Renal
      'BUN', 'Creatinine', 'eGFR', 'UricAcid', 'Sodium', 'Potassium', 'Chloride', 'Bicarbonate', 'Calcium', 'Phosphate', 'Magnesium',
      // Vitamins
      'VitaminD', 'VitaminB12', 'Folate', 'Iron', 'Ferritin', 'TIBC', 'TransferrinSat', 'Zinc', 'Copper',
      // Reports
      'SputumCS', 'CXRReport'
    ];
    createSheetWithHeaders('Lab', labHeaders);

    [cite_start]// 6. Documents Sheet (‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô saveFile [cite: 100-109])
    const docHeaders = [
      'Timestamp', 'Category', 'SubCategory', 'FileURL', 'FileName'
    ];
    createSheetWithHeaders('Documents', docHeaders);

    Logger.log('Setup Complete!');
    ui.alert('‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!', '‡∏™‡∏£‡πâ‡∏≤‡∏á Sheet ‡∏ó‡∏±‡πâ‡∏á 6 ‡∏´‡∏ô‡πâ‡∏≤ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß', ui.ButtonSet.OK);

  } catch (e) {
    Logger.log('Setup Error: ' + e.message);
    ui.alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤: ' + e.message);
  }
}

/**
 * NEW: Helper function (‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ä‡πà‡∏ß‡∏¢)
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á Sheet ‡πÉ‡∏´‡∏°‡πà ‡∏´‡∏£‡∏∑‡∏≠‡∏•‡πâ‡∏≤‡∏á Sheet ‡πÄ‡∏Å‡πà‡∏≤ ‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á (Header)
 * @param {string} sheetName ‡∏ä‡∏∑‡πà‡∏≠ Sheet ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
 * @param {Array<string>} headers ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏±‡∏ß‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå (Array)
 */
function createSheetWithHeaders(sheetName, headers) {
  let sheet = ss.getSheetByName(sheetName);
  
  if (!sheet) {
    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ Sheet ‡∏ô‡∏µ‡πâ ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
    sheet = ss.insertSheet(sheetName);
    Logger.log(`Created new sheet: ${sheetName}`);
  } else {
    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    Logger.log(`Sheet "${sheetName}" already exists. Clearing content.`);
    sheet.clear();
  }
  
  // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á (Headers) ‡∏•‡∏á‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà 1
  const headerRange = sheet.getRange(1, 1, 1, headers.length);
  headerRange.setValues([headers]); // setValues ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ Array 2 ‡∏°‡∏¥‡∏ï‡∏¥
  
  // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á
  headerRange.setFontWeight('bold'); // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏´‡∏ô‡∏≤
  sheet.setFrozenRows(1); // ‡∏ï‡∏£‡∏∂‡∏á‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà 1 ‡πÑ‡∏ß‡πâ
  
  // (Optional) ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
  for (let i = 1; i <= headers.length; i++) {
    sheet.autoResizeColumn(i);
  }
}

// --- CORE & LOGIN ---

// MODIFIED: doGet ‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤ Register ‡πÅ‡∏•‡∏∞‡πÄ‡∏ä‡πá‡∏Ñ Session
function doGet(e) {
  let html;
  let pageParameter = ''; // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô

  // --- Safety Check ---
  if (e && e.parameter && e.parameter.page) {
    pageParameter = e.parameter.page;
  }
  // --- End Safety Check ---

  // 1. ‡πÄ‡∏ä‡πá‡∏Ñ page parameter
  if (pageParameter === 'register') {
    html = HtmlService.createTemplateFromFile('Register').evaluate();
    html.setTitle('Patient B1 - Register');
    return html;
  }

  // 2. ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏´‡∏ô‡πâ‡∏≤ Register ‡∏Å‡πá‡πÄ‡∏ä‡πá‡∏Ñ Session (‡πÉ‡∏ä‡πâ UserProperties)
  //    (‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô isSessionValid ‡∏≠‡∏¢‡∏π‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á)
  const token = PropertiesService.getUserProperties().getProperty('sessionToken');

  if (!token || !isSessionValid(token)) {
    // ‡πÑ‡∏°‡πà‡∏°‡∏µ token ‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ -> ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Login
    html = HtmlService.createTemplateFromFile('Login').evaluate();
    html.setTitle('Patient B1 - Login');
  } else {
    // ‡∏°‡∏µ token -> ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Index ‡∏´‡∏•‡∏±‡∏Å
    html = HtmlService.createTemplateFromFile('Index').evaluate();
    html.setTitle('Patient B1 Record System')
        .addMetaTag('viewport', 'width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no');
  }
  return html;
}

// --- INCLUDE ---
// Includes HTML partials (like PHP include)
function include(filename) {
  return HtmlService.createHtmlOutputFromFile(filename).getContent();
}

// NEW: Function for user registration with Hashing/Salting
// (‡∏ä‡∏∑‡πà‡∏≠ registerUser ‡∏ï‡∏±‡∏ß U ‡πÉ‡∏´‡∏ç‡πà)
function registerUser(credentials) {
  try {
    const { email, password } = credentials;
    const usersSheet = ss.getSheetByName('Users'); // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ä‡∏µ‡∏ï Users
    if (!usersSheet) throw new Error('Users sheet not found.');

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°: ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ Email ‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const data = usersSheet.getDataRange().getValues();
    const headers = data[0]; // ‡πÉ‡∏ä‡πâ‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å‡πÄ‡∏õ‡πá‡∏ô header
    const emailColIndex = headers.indexOf('Email');
    if (emailColIndex === -1) throw new Error('Column "Email" not found in Users sheet.');

    const emailExists = data.slice(1).some(row => row[emailColIndex].toLowerCase() === email.toLowerCase());
    if (emailExists) {
      throw new Error('This email is already registered.');
    }
    // ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î: ‡πÄ‡∏ä‡πá‡∏Ñ Email ‡∏ã‡πâ‡∏≥

    // 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á Salt
    const salt = Utilities.getUuid();

    // 2. Hash ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô + Salt
    const hashBytes = Utilities.computeDigest(Utilities.DigestAlgorithm.SHA_256, password + salt);
    const passwordHash = hashBytes.map(byte => ('0' + (byte & 0xFF).toString(16)).slice(-2)).join('');

    // 3. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Role ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô 'Viewer')
    usersSheet.appendRow([email, passwordHash, salt, 'Viewer']);

    return JSON.stringify({ success: true, message: 'Registration successful.' });

  } catch (e) {
    Logger.log('Register Error: ' + e.message); // Log error ‡∏à‡∏£‡∏¥‡∏á‡πÜ ‡πÑ‡∏ß‡πâ‡∏î‡∏π
    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Error ‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
    return JSON.stringify({ success: false, message: 'Registration failed: ' + e.message });
  }
}

// MODIFIED: Login function with secure Hash comparison
function login(credentials) {
  try {
    const { email, password } = credentials;
    const usersSheet = ss.getSheetByName('Users');
    if (!usersSheet) throw new Error('Users sheet not found.');

    const data = usersSheet.getDataRange().getValues();
    const headers = data.shift(); // ‡πÄ‡∏≠‡∏≤ header ‡∏≠‡∏≠‡∏Å
    const emailCol = headers.indexOf('Email');
    const hashCol = headers.indexOf('PasswordHash');
    const saltCol = headers.indexOf('Salt');
    const roleCol = headers.indexOf('Role');

    // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏´‡∏≤‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏à‡∏≠‡πÑ‡∏´‡∏°
    if ([emailCol, hashCol, saltCol, roleCol].includes(-1)) {
        throw new Error('Missing required columns in Users sheet (Email, PasswordHash, Salt, Role).');
    }

    const user = data.find(row => row[emailCol].toLowerCase() === email.toLowerCase());

    if (!user) {
      return JSON.stringify({ success: false, message: '‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (email)' });
    }

    const storedHash = user[hashCol];
    const storedSalt = user[saltCol];

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Hash ‡πÉ‡∏´‡∏°‡πà
    const newHashBytes = Utilities.computeDigest(Utilities.DigestAlgorithm.SHA_256, password + storedSalt);
    const newHash = newHashBytes.map(byte => ('0' + (byte & 0xFF).toString(16)).slice(-2)).join('');

    // ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö Hash
    if (newHash !== storedHash) {
      return JSON.stringify({ success: false, message: '‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (pass)' });
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Session
    const userRole = user[roleCol];
    const token = createSession(email, userRole);
    return JSON.stringify({ success: true, token: token });

  } catch (e) {
    Logger.log('Login Error: ' + e.message);
    return JSON.stringify({ success: false, message: 'Login failed: ' + e.message });
  }
}

// --- Session Management Functions ---

// ‡∏™‡∏£‡πâ‡∏≤‡∏á Session Token (‡∏≠‡∏≤‡∏¢‡∏∏ 30 ‡∏ô‡∏≤‡∏ó‡∏µ)
function createSession(email, role) {
  const token = Utilities.base64Encode(Utilities.computeDigest(Utilities.DigestAlgorithm.SHA_256, email + new Date().toISOString() + Math.random())); // ‡πÄ‡∏û‡∏¥‡πà‡∏° random ‡∏Å‡∏±‡∏ô token ‡∏ä‡∏ô
  // ‡πÉ‡∏ä‡πâ CacheService ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö session ‡∏à‡∏£‡∏¥‡∏á
  CacheService.getUserCache().put(token, JSON.stringify({ email: email, role: role }), 1800); // 1800 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ = 30 ‡∏ô‡∏≤‡∏ó‡∏µ
  return token;
}

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Session Token ‡∏à‡∏≤‡∏Å Cache
function isSessionValid(token) {
  if (!token) return false;
  const sessionData = CacheService.getUserCache().get(token);
  return sessionData !== null;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà client ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏´‡∏•‡∏±‡∏á login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö token ‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà UserProperties (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ doGet ‡πÄ‡∏ä‡πá‡∏Ñ‡πÑ‡∏î‡πâ)
function setUserSessionToken(token) {
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö token ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏Å‡πá‡∏ö
  if (token && isSessionValid(token)) {
    PropertiesService.getUserProperties().setProperty('sessionToken', token);
  } else {
    // ‡∏ñ‡πâ‡∏≤ token ‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Å‡πá‡∏ö ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏∞‡∏•‡∏ö‡∏Ç‡∏≠‡∏á‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏¥‡πâ‡∏á‡∏Å‡πá‡πÑ‡∏î‡πâ
    PropertiesService.getUserProperties().deleteProperty('sessionToken');
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Logout
function logout() {
  try {
      const token = PropertiesService.getUserProperties().getProperty('sessionToken');
      if (token) {
        CacheService.getUserCache().remove(token); // ‡∏•‡∏ö‡∏à‡∏≤‡∏Å Cache
        PropertiesService.getUserProperties().deleteProperty('sessionToken'); // ‡∏•‡∏ö‡∏à‡∏≤‡∏Å Properties
      }
      return true; // ‡∏ö‡∏≠‡∏Å client ‡∏ß‡πà‡∏≤ logout ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
  } catch (e) {
      Logger.log('Logout Error: ' + e.message);
      return false; // ‡∏ö‡∏≠‡∏Å client ‡∏ß‡πà‡∏≤ logout ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
  }
}


// --- INCLUDE ---
// Includes HTML partials (like PHP include)
function include(filename) {
  return HtmlService.createHtmlOutputFromFile(filename).getContent();
}

// --- DATA SAVING FUNCTIONS ---

/**
 * Saves data to a specified sheet.
* @param {string} sheetName The name of the sheet to save to.
* @param {Object} dataObject The data object from the client.
 * @returns {string} Success message.
 */
function saveData(sheetName, dataObject) {
  try {
    const sheet = ss.getSheetByName(sheetName);
if (!sheet) {
      throw new Error(`Sheet "${sheetName}" not found.`);
}
    
    // Get headers from row 1
    const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
// Create new row based on headers
    const newRow = headers.map(header => {
      if (header === 'Timestamp') {
        return new Date();
      }
      // Handle boolean (checkboxes)
      if (typeof dataObject[header] === 'boolean') {
        return dataObject[header];
      }
      return dataObject[header] || null; // Use null for empty/undefined fields
    });
sheet.appendRow(newRow);
    
    return `Data successfully saved to ${sheetName}.`;
    
  } catch (e) {
    Logger.log(e);
    throw new Error(`Server Error: ${e.message}`);
}
}

// MODIFIED: Specific save functions called by the client
function saveVitalData(data) {
  // data object will now contain 'Weight'
  return saveData('DailyVitals', data);
}

function saveActivityData(data) {
  // data object will now contain 'PT_Note', 'OT_Note', 'SleepDay', 'SleepNight' (as HH:MM), 'DeliriumTime', 'WalkingSteps'
  // ‡πÄ‡∏£‡∏≤‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á HH:MM ‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡∏≤‡∏ó‡∏µ ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
  if (data.SittingTime) {
    data.SittingTimeMin = convertHHMMtoMinutes(data.SittingTime);
  }
  if (data.StandingTime) {
    data.StandingTimeMin = convertHHMMtoMinutes(data.StandingTime);
  }
  if (data.SleepDay) {
    data.SleepDayHours = convertHHMMtoMinutes(data.SleepDay) / 60;
  }
  if (data.SleepNight) {
    data.SleepNightHours = convertHHMMtoMinutes(data.SleepNight) / 60;
  }
  
  return saveData('DailyActivity', data);
}

// NEW: Helper to convert HH:MM string to total minutes
function convertHHMMtoMinutes(hhmm) {
  if (!hhmm || typeof hhmm !== 'string' || !hhmm.includes(':')) {
    return 0;
  }
  try {
    const parts = hhmm.split(':');
    const hours = parseInt(parts[0], 10) || 0;
    const minutes = parseInt(parts[1], 10) || 0;
    return (hours * 60) + minutes;
  } catch (e) {
    return 0;
  }
}

function saveMedicationData(data) {
  return saveData('Medication', data);
}

function saveLabData(data) {
  // MODIFIED: This will now save all the new lab fields
  return saveData('Lab', data);
}

// NEW: Function to handle file uploads
function saveFile(fileData, category, otherCategory) {
  try {
    const { MimeType, FileName, FileContent } = fileData;
    const blob = Utilities.newBlob(Utilities.base64Decode(FileContent), MimeType, FileName);
    
    const mainFolder = DriveApp.getFolderById(UPLOAD_FOLDER_ID);
    let targetFolder;
    
    // ‡∏´‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
    const subFolderName = (category === 'Other') ? otherCategory : category;
    const folders = mainFolder.getFoldersByName(subFolderName);
    
    if (folders.hasNext()) {
      targetFolder = folders.next();
    } else {
      targetFolder = mainFolder.createFolder(subFolderName);
    }
    
    // ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
    const file = targetFolder.createFile(blob);
    const fileUrl = file.getUrl();
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡∏ä‡∏µ‡∏ï 'Documents'
    const docSheet = ss.getSheetByName('Documents');
    if (!docSheet) throw new Error('Documents sheet not found.');
    
    docSheet.appendRow([
      new Date(),       // Timestamp
      category,         // Category
      subFolderName,    // SubCategory (‡πÄ‡∏ú‡∏∑‡πà‡∏≠ 'Other')
      fileUrl,          // FileURL
      FileName          // FileName
    ]);
    
    return `File "${FileName}" uploaded successfully to ${subFolderName}.`;

  } catch (e) {
    Logger.log(e);
    throw new Error(`Server Error: ${e.message}`);
  }
}


// --- DATA FETCHING FUNCTIONS ---

/**
 * Utility to get data from a sheet and convert to array of objects.
* @param {string} sheetName The name of the sheet.
* @param {string} dateColumnName The name of the column to filter by date (e.g., "RecordDateTime").
 * @param {string} timeRange String like "7d", "14d", "30d", or "all".
 * @returns {Array<Object>} Array of data objects.
 */
// MODIFIED: getData (Optimized Server-Side Filtering)
// (‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô getData ‡πÄ‡∏Å‡πà‡∏≤)
function getData(sheetName, dateColumnName = "RecordDateTime", timeRange = "all") {
  const sheet = ss.getSheetByName(sheetName);
  // ‡∏ñ‡πâ‡∏≤‡∏ä‡∏µ‡∏ï‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà ‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ‡πÅ‡∏Ñ‡πà header (‡πÅ‡∏ñ‡∏ß 1) ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á
  if (!sheet || sheet.getLastRow() <= 1) return [];

  // ‡∏≠‡πà‡∏≤‡∏ô Headers (‡πÅ‡∏ñ‡∏ß 1)
  const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
  const dateColIndex = headers.indexOf(dateColumnName);
  // ‡∏ñ‡πâ‡∏≤‡∏´‡∏≤‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á
  if (dateColIndex === -1 && dateColumnName !== null) { // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ä‡πá‡∏Ñ dateColumnName !== null
     Logger.log(`Date column "${dateColumnName}" not found in sheet "${sheetName}". Returning empty array.`);
     return [];
  }


  let startRow = 2; // ‡πÅ‡∏ñ‡∏ß‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡πÅ‡∏ñ‡∏ß 2 ‡πÄ‡∏™‡∏°‡∏≠ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô 'all')
  const lastRow = sheet.getLastRow();

  // 1. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà 'all')
  let filterDate = null;
  if (timeRange !== "all") {
    filterDate = new Date();
    if (timeRange === "7d") filterDate.setDate(filterDate.getDate() - 7);
    else if (timeRange === "14d") filterDate.setDate(filterDate.getDate() - 14);
    else if (timeRange === "30d") filterDate.setDate(filterDate.getDate() - 30);
    filterDate.setHours(0, 0, 0, 0); // ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 00:00:00

    // --- ‡∏™‡πà‡∏ß‡∏ô Optimize ---
    // 2. ‡∏≠‡πà‡∏≤‡∏ô *‡πÄ‡∏â‡∏û‡∏≤‡∏∞* ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏ß‡πà‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå)
    //   (‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà 2, ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà, ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß = lastRow-1, ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô 1 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå)
    const dateValues = sheet.getRange(2, dateColIndex + 1, lastRow - 1, 1).getValues();

    // 3. ‡∏ß‡∏ô‡∏´‡∏≤‡πÅ‡∏ñ‡∏ß‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏à‡∏≤‡∏Å "‡∏•‡πà‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏ö‡∏ô" (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà -> ‡πÄ‡∏Å‡πà‡∏≤)
    for (let i = dateValues.length - 1; i >= 0; i--) {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ dateValues[i] ‡πÅ‡∏•‡∏∞ dateValues[i][0] ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏à‡∏£‡∏¥‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á Date object
      if (dateValues[i] && dateValues[i][0]) {
          const recordDate = new Date(dateValues[i][0]);
          // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Date ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
          if (!isNaN(recordDate.getTime())) {
              if (recordDate < filterDate) {
                // ‡πÄ‡∏à‡∏≠‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà *‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡∏ß‡πà‡∏≤* ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏á
                // ‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡∏∑‡∏≠‡πÅ‡∏ñ‡∏ß‡∏ñ‡∏±‡∏î‡πÑ‡∏õ (i+1)
                // ‡πÅ‡∏ñ‡∏ß‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡∏ä‡∏µ‡∏ï‡∏Ñ‡∏∑‡∏≠ index + 2 (‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏≠‡πà‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡πÅ‡∏ñ‡∏ß 2)
                startRow = i + 1 + 2;
                break; // ‡∏´‡∏¢‡∏∏‡∏î‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
              }
          } else {
              // ‡∏ñ‡πâ‡∏≤‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ ‡∏´‡∏£‡∏∑‡∏≠ Log ‡πÑ‡∏ß‡πâ
              Logger.log(`Invalid date found in sheet "${sheetName}" at row index ${i + 2}: ${dateValues[i][0]}`);
          }
      } else {
           Logger.log(`Empty or invalid entry in date column in sheet "${sheetName}" at row index ${i + 2}`);
      }


    }
    // ‡∏ñ‡πâ‡∏≤‡∏ß‡∏ô‡∏à‡∏ô‡∏™‡∏∏‡∏î‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡∏ß‡πà‡∏≤ (‡πÄ‡∏ä‡πà‡∏ô ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 30 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡∏µ‡∏ï‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)
    // startRow ‡∏à‡∏∞‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÄ‡∏õ‡πá‡∏ô 2 (‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô)
    // --- ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏™‡πà‡∏ß‡∏ô Optimize ---
  }

  // ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏•‡πâ‡∏ß startRow ‡∏°‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÅ‡∏ñ‡∏ß‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ (‡πÄ‡∏ä‡πà‡∏ô ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å) ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á
  if (startRow > lastRow) return [];

  // 4. ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• *‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡πà‡∏ß‡∏á‡πÅ‡∏ñ‡∏ß* ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏´‡∏≤‡πÄ‡∏à‡∏≠
  const numRowsToGet = lastRow - startRow + 1;
  const dataValues = sheet.getRange(startRow, 1, numRowsToGet, headers.length).getValues();

  // 5. ‡πÅ‡∏õ‡∏•‡∏á Array ‡πÄ‡∏õ‡πá‡∏ô Array of Objects (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
  const result = dataValues.map(row => {
    const obj = {};
    headers.forEach((header, index) => {
      obj[header] = row[index];
    });
    return obj;
  });

  // 6. ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏õ‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
  if (dateColIndex !== -1) {
      result.sort((a, b) => {
          const dateA = new Date(a[dateColumnName]);
          const dateB = new Date(b[dateColumnName]);
          // Handle invalid dates if necessary
          if (isNaN(dateA.getTime()) && isNaN(dateB.getTime())) return 0;
          if (isNaN(dateA.getTime())) return 1; // Put invalid dates at the end
          if (isNaN(dateB.getTime())) return -1;
          return dateB - dateA; // Sort descending (newest first)
      });
  }


  return result;
}

// --- LOGS & DASHBOARD DATA ---
// We can just use the generic `getData` function and stringify the result.
// Stringify is safer for passing complex objects/dates from GAS to client.
// MODIFIED: getMedicationData (for Pagination)
// (‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô getMedicationData ‡πÄ‡∏Å‡πà‡∏≤)
function getMedicationData(timeRange, pageNumber = 1) { // ‡∏£‡∏±‡∏ö pageNumber ‡πÄ‡∏û‡∏¥‡πà‡∏° (‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ñ‡∏∑‡∏≠ 1)
  // 1. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß (‡∏à‡∏≤‡∏Å getData ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤ Optimize ‡πÅ‡∏•‡πâ‡∏ß)
  const allData = getData('Medication', 'RecordDateTime', timeRange);

  const pageSize = 20; // **‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏´‡∏ô‡πâ‡∏≤‡∏•‡∏∞‡∏Å‡∏µ‡πà‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£** (‡πÄ‡∏ä‡πà‡∏ô 20)
  const totalItems = allData.length;
  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏õ‡∏±‡∏î‡πÄ‡∏®‡∏©‡∏Ç‡∏∂‡πâ‡∏ô) ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏•‡∏¢‡∏Å‡πá‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô 1 ‡∏´‡∏ô‡πâ‡∏≤
  const totalPages = Math.ceil(totalItems / pageSize) || 1;

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ pageNumber ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô totalPages
  const currentPage = Math.max(1, Math.min(pageNumber, totalPages)); // ‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 1 ‡∏ñ‡∏∂‡∏á totalPages

  // 2. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Index ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏±‡πâ‡∏ô
  const startIndex = (currentPage - 1) * pageSize;
  const endIndex = startIndex + pageSize; // slice ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏°‡∏ï‡∏±‡∏ß‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á -1

  // 3. ‡πÉ‡∏ä‡πâ .slice() ‡πÄ‡∏û‡∏∑‡πà‡∏≠ "‡∏´‡∏±‡πà‡∏ô" ‡πÄ‡∏≠‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ
  const paginatedData = allData.slice(startIndex, endIndex);

  // 4. ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô Object ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 3 ‡∏≠‡∏¢‡πà‡∏≤‡∏á:
  //    - data: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ
  //    - totalPages: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  //    - currentPage: ‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ
  return JSON.stringify({
    data: paginatedData,
    totalPages: totalPages,
    currentPage: currentPage
  });
}

function getLabData(timeRange) {
  const data = getData('Lab', 'RecordDateTime', timeRange);
  return JSON.stringify(data);
}

// NEW: getLabData (for Pagination)
// (‡∏ß‡∏≤‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô Code.gs)
function getLabData_Paginated(timeRange, pageNumber = 1) {
  const allData = getData('Lab', 'RecordDateTime', timeRange); // ‡πÉ‡∏ä‡πâ getData ‡∏ó‡∏µ‡πà Optimize ‡πÅ‡∏•‡πâ‡∏ß
  const pageSize = 10; // ** Lab Log ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏•‡∏∞ 10 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏¢‡∏≠‡∏∞‡∏Å‡∏ß‡πà‡∏≤ MedLog) **
  const totalItems = allData.length;
  const totalPages = Math.ceil(totalItems / pageSize) || 1;
  const currentPage = Math.max(1, Math.min(pageNumber, totalPages));
  const startIndex = (currentPage - 1) * pageSize;
  const endIndex = startIndex + pageSize;
  const paginatedData = allData.slice(startIndex, endIndex);

  return JSON.stringify({
    data: paginatedData,
    totalPages: totalPages,
    currentPage: currentPage
  });
}

// NEW: getDocumentLogData (for Pagination)
// (‡∏ß‡∏≤‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô Code.gs)
function getDocumentLogData_Paginated(timeRange, category, pageNumber = 1) { // ‡πÄ‡∏û‡∏¥‡πà‡∏° category parameter
  // 1. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡πà‡∏≠‡∏ô (‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏° Time Range)
  let allData = getData('Documents', 'Timestamp', timeRange);

  // 2. ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏° Category (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà 'All')
  if (category && category !== 'All') {
    allData = allData.filter(row => row.Category === category);
  }
  
  // 3. ‡∏ó‡∏≥ Pagination
  const pageSize = 15; // ** Document Log ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏•‡∏∞ 15 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ **
  const totalItems = allData.length;
  const totalPages = Math.ceil(totalItems / pageSize) || 1;
  const currentPage = Math.max(1, Math.min(pageNumber, totalPages));
  const startIndex = (currentPage - 1) * pageSize;
  const endIndex = startIndex + pageSize;
  const paginatedData = allData.slice(startIndex, endIndex);

  return JSON.stringify({
    data: paginatedData,
    totalPages: totalPages,
    currentPage: currentPage
  });
}

// MODIFIED: Renamed to be more specific for dashboard
function getVitalsDashboardData(timeRange) {
  const data = getData('DailyVitals', 'RecordDateTime', timeRange);
// Sort ascending for charts
  data.sort((a, b) => new Date(a.RecordDateTime) - new Date(b.RecordDateTime));
  return JSON.stringify(data);
}

// MODIFIED: Renamed to be more specific for dashboard
function getActivityDashboardData(timeRange) {
  const data = getData('DailyActivity', 'RecordDateTime', timeRange);
// Sort ascending for charts
  data.sort((a, b) => new Date(a.RecordDateTime) - new Date(b.RecordDateTime));
  return JSON.stringify(data);
}

// MODIFIED: This function is now perfect for all lab trends
function getLabTrendData(labName, timeRange) {
  const sheet = ss.getSheetByName('Lab');
  
  // --- üõë START OF FIX üõë ---
  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Sheet ‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ‡πÅ‡∏Ñ‡πà Header
  if (!sheet || sheet.getLastRow() <= 1) {
    Logger.log(`getLabTrendData: Sheet "Lab" is empty or missing.`);
    return JSON.stringify([]); // ‡∏™‡πà‡∏á Array ‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
  }
  // --- üõë END OF FIX üõë ---

  const data = sheet.getDataRange().getValues();
  const headers = data.shift();

  // Calculate date filter
  let filterDate = null;
if (timeRange !== "all") {
    filterDate = new Date();
    if (timeRange === "7d") filterDate.setDate(filterDate.getDate() - 7);
else if (timeRange === "14d") filterDate.setDate(filterDate.getDate() - 14);
    else if (timeRange === "30d") filterDate.setDate(filterDate.getDate() - 30);
    filterDate.setHours(0, 0, 0, 0);
}
  
  const result = data.map(row => {
    const recordDate = new Date(row[dateColIndex]);
    if (filterDate && recordDate < filterDate) {
      return null;
    }
    const value = parseFloat(row[labColIndex]);
    if (!isNaN(value)) {
      return {
        x: recordDate.toISOString(),
        y: value
      };
    }
    return null;
  }).filter(obj => obj !== null);
// Sort ascending
  result.sort((a, b) => new Date(a.x) - new Date(b.x));

  return JSON.stringify(result);
}

// NEW: Get Document Log Data
function getDocumentLogData(timeRange, category) {
  let data = getData('Documents', 'Timestamp', timeRange);
  
  if (category && category !== 'All') {
    data = data.filter(row => row.Category === category);
  }
  
  return JSON.stringify(data);
}


// --- DAILY SUMMARY FUNCTION ---

function getDailySummaryData(dateString) { 
  // 1. Define Date Times
  const parts = dateString.split('-');
  const year = parseInt(parts[0], 10);
  const month = parseInt(parts[1], 10) - 1; // JS months (0-11)
  const day = parseInt(parts[2], 10);
  const startTime = new Date(year, month, day, 0, 0, 0);
  const endTime = new Date(year, month, day, 23, 59, 59, 999);
  
  // MODIFIED: Create summary object
  const summary = {
    vitals: {},
    io: {
      intake: 0,
      outputUrine: 0,
      outputStool: 0,
      outputSuction: 0,
      balance: 0,
      stoolCount: 0,
      stoolColors: [],
      stoolTypes: [],
      secretionColors: []
    },
    activity: {
    sitting: 0,
      standing: 0,
      walking: 0, // NEW
      pt: [],
      ot: [],
      ptNotes: [], // NEW
      otNotes: []  // NEW
    },
    behavior: {
      apneaDay: 0,
      apneaNight: 0,
      sleepDay: 0, // MODIFIED: Will store hours
      sleepNight: 0, // MODIFIED: Will store hours
      deliriumTimes: [], // NEW
      prn: [],
      cc: [],
      symptoms: [] 
    },
    clinical: {
   tryWean: 0,
      latest: {},
      weight: null // NEW
    },
    meds: []
  };

// 2. Fetch Data
  const vitalsSheet = ss.getSheetByName('DailyVitals');
const activitySheet = ss.getSheetByName('DailyActivity');
const medsSheet = ss.getSheetByName('Medication');

// --- üõë START OF FIX üõë ---
// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡∏•‡∏∞‡∏ä‡∏µ‡∏ï ‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 1 ‡πÅ‡∏ñ‡∏ß)
// ‡∏ñ‡πâ‡∏≤‡∏ä‡∏µ‡∏ï‡∏ß‡πà‡∏≤‡∏á (getLastRow() < 1) ‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ‡πÅ‡∏Ñ‡πà‡∏´‡∏±‡∏ß (getLastRow() == 1) ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ Array ‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏ó‡∏ô

const vitalsData = (vitalsSheet.getLastRow() > 1) 
  ? vitalsSheet.getDataRange().getValues() 
  : []; // ‡πÉ‡∏ä‡πâ Array ‡∏ß‡πà‡∏≤‡∏á ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•

const activityData = (activitySheet.getLastRow() > 1) 
  ? activitySheet.getDataRange().getValues() 
  : []; // ‡πÉ‡∏ä‡πâ Array ‡∏ß‡πà‡∏≤‡∏á ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•

const medsData = (medsSheet.getLastRow() > 1) 
  ? medsSheet.getDataRange().getValues() 
  : []; // ‡πÉ‡∏ä‡πâ Array ‡∏ß‡πà‡∏≤‡∏á ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•

// ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ä‡∏µ‡∏ï‡πÑ‡∏´‡∏ô‡πÄ‡∏•‡∏¢ ‡∏Å‡πá‡∏™‡πà‡∏á summary ‡πÄ‡∏õ‡∏•‡πà‡∏≤‡πÜ ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
if (vitalsData.length === 0 && activityData.length === 0 && medsData.length === 0) {
  Logger.log('DailySummary: No data rows found. Returning empty summary.');
  return JSON.stringify(summary); // summary ‡πÄ‡∏õ‡πá‡∏ô object ‡πÄ‡∏õ‡∏•‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
}

// ‡πÄ‡∏≠‡∏≤ Header (‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å) ‡∏≠‡∏≠‡∏Å ‡∏ï‡πà‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡πÜ (length > 0)
const vitalsHeaders = (vitalsData.length > 0) ? vitalsData.shift() : [];
const activityHeaders = (activityData.length > 0) ? activityData.shift() : [];
const medsHeaders = (medsData.length > 0) ? medsData.shift() : [];
// --- üõë END OF FIX üõë ---

  // 3. Process DailyVitals Sheet
  const vitalsToProcess = ['Temperature', 'BPSystolic', 'BPDiastolic', 'HeartRate', 'RespiratoryRate', 'SpO2', 'GCS', 'Weight']; // MODIFIED: Added Weight
  const collectors = {};
  vitalsToProcess.forEach(v => { collectors[v] = []; });
  
  let latestClinical = null;
vitalsData.forEach(row => {
    const recordTime = new Date(row[vitalsHeaders.indexOf('RecordDateTime')]);
    if (recordTime >= startTime && recordTime <= endTime) { 
      
      // Vitals Stats
      vitalsToProcess.forEach(v => {
        const val = parseFloat(row[vitalsHeaders.indexOf(v)]);
        if (!isNaN(val)) collectors[v].push(val);
      });
      
      // I/O Sums
summary.io.intake += parseFloat(row[vitalsHeaders.indexOf('Intake')]) || 0;
      summary.io.outputUrine += parseFloat(row[vitalsHeaders.indexOf('OutputUrine')]) || 0;
      const stool = parseFloat(row[vitalsHeaders.indexOf('OutputStool')]) || 0;
      if (stool > 0) {
        summary.io.outputStool += stool;
        summary.io.stoolCount++;
        const stoolColor = row[vitalsHeaders.indexOf('StoolColor')];
        if (stoolColor) summary.io.stoolColors.push(stoolColor);
        const stoolType = row[vitalsHeaders.indexOf('StoolType')];
        if (stoolType) summary.io.stoolTypes.push(stoolType);
}
      summary.io.outputSuction += parseFloat(row[vitalsHeaders.indexOf('OutputSuction')]) || 0;

      const secretion = row[vitalsHeaders.indexOf('SecretionColor')];
      if (secretion) summary.io.secretionColors.push(secretion);
// Clinical
      summary.clinical.tryWean += parseFloat(row[vitalsHeaders.indexOf('TryWeanMin')]) || 0;
// Latest Clinical Obs
      if (!latestClinical || recordTime > latestClinical.time) {
        latestClinical = {
          time: recordTime,
          rash: row[vitalsHeaders.indexOf('Rash')],
          lung: row[vitalsHeaders.indexOf('LungSound')],
          edema: row[vitalsHeaders.indexOf('Edema')]
        };
}
    }
  });

  // Calculate Vitals Stats
  vitalsToProcess.forEach(v => {
    const arr = collectors[v];
    if (arr.length > 0) {
      summary.vitals[v] = {
        avg: arr.reduce((a, b) => a + b, 0) / arr.length,
        max: Math.max(...arr),
        min: Math.min(...arr),
        latest: arr[arr.length - 1]
      };
    } else {
 summary.vitals[v] = { avg: null, max: null, min: null, latest: null };
    }
  });
  
  // NEW: Set latest weight
  if(summary.vitals.Weight && summary.vitals.Weight.latest) {
    summary.clinical.weight = summary.vitals.Weight.latest;
  }
  
// Calculate I/O Balance
  const totalOutput = summary.io.outputUrine + summary.io.outputStool + summary.io.outputSuction;
  summary.io.balance = summary.io.intake - totalOutput;
// Unique I/O details
  summary.io.stoolColors = [...new Set(summary.io.stoolColors)];
  summary.io.stoolTypes = [...new Set(summary.io.stoolTypes)];
  summary.io.secretionColors = [...new Set(summary.io.secretionColors)];
// Set latest clinical
  if (latestClinical) summary.clinical.latest = latestClinical;
  
// 4. Process DailyActivity Sheet
  const ptCols = ['PT_Mobility', 'PT_Balance', 'PT_Strength', 'PT_Gait', 'PT_Aerobic', 'PT_ChestPT'];
const otCols = ['OT_MouthCare', 'OT_OralMotor', 'OT_VitalStim', 'OT_Speech', 'OT_Cognitive'];
  const symptomsCols = ['S_Fever', 'S_Cough', 'S_RunnyNose', 'S_Vomiting', 'S_Diarrhea', 'S_Headache', 'S_Seizure', 'S_Rash'];
let ptDone = new Set();
  let otDone = new Set();
  let symptomsDone = new Set();
  
activityData.forEach(row => {
    const recordTime = new Date(row[activityHeaders.indexOf('RecordDateTime')]);
    if (recordTime >= startTime && recordTime <= endTime) { 
      
      // Activity Sums
      // MODIFIED: Use the converted Min values
      summary.activity.sitting += parseFloat(row[activityHeaders.indexOf('SittingTimeMin')]) || 0;
      summary.activity.standing += parseFloat(row[activityHeaders.indexOf('StandingTimeMin')]) || 0;
      summary.activity.walking += parseFloat(row[activityHeaders.indexOf('WalkingSteps')]) || 0; // NEW

      // Behavior Sums
      summary.behavior.apneaDay += parseFloat(row[activityHeaders.indexOf('ApneaDayCount')]) || 0;
      summary.behavior.apneaNight += parseFloat(row[activityHeaders.indexOf('ApneaNightCount')]) || 0;
      // MODIFIED: Use the converted Hour values
      summary.behavior.sleepDay += parseFloat(row[activityHeaders.indexOf('SleepDayHours')]) || 0;
     summary.behavior.sleepNight += parseFloat(row[activityHeaders.indexOf('SleepNightHours')]) || 0;
      
      // NEW: Delirium Time
      const deliriumTime = row[activityHeaders.indexOf('DeliriumTime')];
      if (deliriumTime) summary.behavior.deliriumTimes.push(deliriumTime);
      
      // Notes
      const prn = row[activityHeaders.indexOf('Note_PRN_Med')];
      if (prn) summary.behavior.prn.push(prn);
const cc = row[activityHeaders.indexOf('Note_ChiefComplaint')];
      if (cc) summary.behavior.cc.push(cc);
      
      // NEW: PT/OT Notes
      const ptNote = row[activityHeaders.indexOf('PT_Note')];
      if (ptNote) summary.activity.ptNotes.push(ptNote);
      const otNote = row[activityHeaders.indexOf('OT_Note')];
      if (otNote) summary.activity.otNotes.push(otNote);

      // PT/OT/Symptoms lists
      ptCols.forEach(col => {
        if (row[activityHeaders.indexOf(col)] === true) ptDone.add(col.replace('PT_', ''));
      });
otCols.forEach(col => {
        if (row[activityHeaders.indexOf(col)] === true) otDone.add(col.replace('OT_', ''));
      });
symptomsCols.forEach(col => {
        if (row[activityHeaders.indexOf(col)] === true) symptomsDone.add(col.replace('S_', ''));
      });
}
  });
  
  summary.activity.pt = [...ptDone];
  summary.activity.ot = [...otDone];
  summary.behavior.symptoms = [...symptomsDone];
  
// 5. Process Medication Sheet
  medsData.forEach(row => {
    const recordTime = new Date(row[medsHeaders.indexOf('RecordDateTime')]);
    if (recordTime >= startTime && recordTime <= endTime) { 
      summary.meds.push({
        time: recordTime.toLocaleTimeString('th-TH', { hour: '2-digit', minute: '2-digit' }),
        name: row[medsHeaders.indexOf('DrugName')],
        dose: row[medsHeaders.indexOf('Dose')],
        route: row[medsHeaders.indexOf('Route')],
        note: row[medsHeaders.indexOf('Note')]
      });
    
}
  });

  return JSON.stringify(summary);
}

// --- NEW: SUMMARY TABLE FUNCTIONS ---

// NEW: Get data for the main summary table
function getSummaryTableData(timeRange) {

  // --- üõë START OF FIX üõë ---
  // (‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ getData ‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ï‡πà‡πÄ‡∏£‡∏≤‡∏Ñ‡∏ß‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á)
  const vitalsSheet = ss.getSheetByName('DailyVitals');
  const activitySheet = ss.getSheetByName('DailyActivity');
  
  if ((!vitalsSheet || vitalsSheet.getLastRow() <= 1) && 
      (!activitySheet || activitySheet.getLastRow() <= 1)) {
    Logger.log('getSummaryTableData: Vitals and Activity sheets are empty.');
    return JSON.stringify([]); // ‡∏™‡πà‡∏á Array ‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
  }
  // --- üõë END OF FIX üõë ---

  const vitalsData = getData('DailyVitals', 'RecordDateTime', timeRange);
  const activityData = getData('DailyActivity', 'RecordDateTime', timeRange);
  
  // Group data by date
  const dailySummaries = {};

  // Helper function to get YYYY-MM-DD string
  const getLocalDateString = (date) => {
    const d = new Date(date);
    d.setMinutes(d.getMinutes() - d.getTimezoneOffset());
    return d.toISOString().split('T')[0];
  };

  // Initialize day
  const initDay = (dateStr) => {
    if (!dailySummaries[dateStr]) {
      dailySummaries[dateStr] = {
        date: dateStr,
        bps: [],
        bpd: [],
        intake: 0,
        output: 0,
        weight: null,
        tryWean: 0,
        sleepDay: 0,
        sleepNight: 0,
        apneaDay: 0,
        apneaNight: 0,
        prn: [],
        cc: []
      };
    }
  };

  // Process Vitals
  vitalsData.forEach(row => {
    const dateStr = getLocalDateString(row.RecordDateTime);
    initDay(dateStr);
    const day = dailySummaries[dateStr];
    
    if (row.BPSystolic) day.bps.push(parseFloat(row.BPSystolic));
    if (row.BPDiastolic) day.bpd.push(parseFloat(row.BPDiastolic));
    day.intake += parseFloat(row.Intake) || 0;
    day.output += (parseFloat(row.OutputUrine) || 0) + (parseFloat(row.OutputStool) || 0) + (parseFloat(row.OutputSuction) || 0);
    if (row.Weight) day.weight = parseFloat(row.Weight); // Takes the last recorded weight of the day
    day.tryWean += parseFloat(row.TryWeanMin) || 0;
  });

  // Process Activity
  activityData.forEach(row => {
    const dateStr = getLocalDateString(row.RecordDateTime);
    initDay(dateStr);
    const day = dailySummaries[dateStr];
    
    day.sleepDay += parseFloat(row.SleepDayHours) || 0;
    day.sleepNight += parseFloat(row.SleepNightHours) || 0;
    day.apneaDay += parseFloat(row.ApneaDayCount) || 0;
    day.apneaNight += parseFloat(row.ApneaNightCount) || 0;
    if (row.Note_PRN_Med) day.prn.push(row.Note_PRN_Med);
    if (row.Note_ChiefComplaint) day.cc.push(row.Note_ChiefComplaint);
  });

  // Calculate averages and format
  const result = Object.values(dailySummaries).map(day => {
    const avgBps = day.bps.length > 0 ? (day.bps.reduce((a, b) => a + b, 0) / day.bps.length).toFixed(0) : null;
    const avgBpd = day.bpd.length > 0 ? (day.bpd.reduce((a, b) => a + b, 0) / day.bpd.length).toFixed(0) : null;
    
    return {
      date: day.date,
      bp: (avgBps && avgBpd) ? `${avgBps}/${avgBpd}` : 'N/A',
      ioBalance: (day.intake - day.output).toFixed(0),
      weight: day.weight,
      tryWean: day.tryWean,
      sleepDay: day.sleepDay.toFixed(1),
      sleepNight: day.sleepNight.toFixed(1),
      apneaDay: day.apneaDay,
      apneaNight: day.apneaNight,
      prn: day.prn.join('; '),
      cc: day.cc.join('; ')
    };
  });

  // Sort by date descending (newest first)
  result.sort((a, b) => new Date(b.date) - new Date(a.date));
  
  return JSON.stringify(result);
}

// NEW: Get data for the lab comparison table
function getLabComparisonData(timeRange) {
  const labData = getData('Lab', 'RecordDateTime', timeRange);
  
  // Helper function to get YYYY-MM-DD string
  const getLocalDateString = (date) => {
    const d = new Date(date);
    d.setMinutes(d.getMinutes() - d.getTimezoneOffset());
    return d.toISOString().split('T')[0];
  };
  
  const dailyLabs = {};
  
  labData.forEach(row => {
    const dateStr = getLocalDateString(row.RecordDateTime);
    if (!dailyLabs[dateStr]) {
      dailyLabs[dateStr] = { date: dateStr };
    }
    
    // Loop through all properties in the row
    for (const key in row) {
      // We only care about lab values (which we assume are not Timestamp, RecordDateTime, etc.)
      // and we only want the *last* value of the day if multiple labs were entered.
      if (key !== 'RecordDateTime' && key !== 'Timestamp' && row[key] !== null && row[key] !== '') {
         // Check if it's a number, or a report string
         const val = parseFloat(row[key]);
         if (!isNaN(val)) {
           dailyLabs[dateStr][key] = val;
         } else if (typeof row[key] === 'string' && (key === 'SputumCS' || key === 'CXRReport')) {
           // Don't include large reports in this table
         }
      }
    }
  });

  // Get all unique lab headers that were found
  const headers = new Set(['date']);
  Object.values(dailyLabs).forEach(day => {
    Object.keys(day).forEach(key => headers.add(key));
  });

  // Convert to array and sort by date descending
  const result = Object.values(dailyLabs);
  result.sort((a, b) => new Date(b.date) - new Date(a.date));
  
  return JSON.stringify({
    headers: [...headers],
    data: result
  });
}

// NEW: Cache Wrapper for Summary Table Data
// (‡∏ß‡∏≤‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô Code.gs)
function getSummaryTableData_Cached(timeRange) { // This function was inside the previous function, move it out
  // 1. ‡πÉ‡∏ä‡πâ ScriptCache (Cache ‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÅ‡∏ä‡∏£‡πå)
  const cache = CacheService.getScriptCache();
  // 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á Key ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ
  const cacheKey = 'SUMMARY_TABLE_' + timeRange; 

  // 3. ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å Cache ‡∏Å‡πà‡∏≠‡∏ô
  const cachedData = cache.get(cacheKey);
  if (cachedData != null) {
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠‡πÉ‡∏ô Cache
    Logger.log('Serving Summary Table from CACHE: ' + cacheKey);
    return cachedData; // ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏•‡∏¢ (‡πÄ‡∏£‡πá‡∏ß‡∏°‡∏≤‡∏Å)
  }

  // 4. ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡πÉ‡∏ô Cache (Cache Miss)
  Logger.log('Cache MISS. Generating Summary Table: ' + cacheKey);
  
  // 5. ‡∏Å‡πá‡πÑ‡∏õ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏£‡∏¥‡∏á (‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÉ‡∏´‡∏°‡πà
  const jsonData = getSummaryTableData(timeRange); 

  // 6. ‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏´‡∏°‡πà‡∏•‡∏á Cache (‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ 1800 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ = 30 ‡∏ô‡∏≤‡∏ó‡∏µ)
  cache.put(cacheKey, jsonData, 1800);

  // 7. ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏´‡∏°‡πà‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
  return jsonData;
}